git init 
git add 
git commit -m 
git branch 
git diff
git status
git stash
git log
git remote add origin git@github.com:hanyujun.learngit.git
将现有的本地repos与远程的仓库进行关联
git pull orgin master 
将远程仓库的最新的版本拉下来
git push -u origin master
将本地的更新推送到远程仓库
git branch branch_name
git checkout branch_name
test git how to use git branch and how to use git chenckout
test in which case can get conflict
好吧，要使用这个功能还需要一个条件，就是系统的 shell 需要选用 bash 。在 git/contrib/completion 目录下有 git-completion.bash 这个文件。把这个文件复制到系统目录：

$ cp git/contrib/completion/git-completion.bash ~/.git-completion.bash

    在 .bashrc 中加入：

source ~/.git-completion.bash

    OK ，现在我们可以试一下效果了： 
test git how to use git branch and how to use git chenckout 
$ git merge feature1
Auto-merging readme.txt
CONFLICT (content): Merge conflict in readme.txt
Automatic merge failed; fix conflicts and then commit the result.
分支重命名
　　重命名分支：

　　git branch –m oldname newname

　　-m不会覆盖已有分支名称，即如果名为newname的分支已经存在，则会提示已经存在了。

　　如果改成-M就可以覆盖已有分支名称了，即会强制覆盖名为newname的分支，这种操作要谨慎。
删除分支
　　有些分支没有必要长期保存，比如分支中的代码已经打了标签并已发布，或者实验分支已经成功完成工作或中途废弃等.

　　注意：打了标签的分支，Git在删除该分支时，从版本树起始到此标签间的全部历史轨迹均会保留，此时删除分支操作只是删除分支本身的名称，因此可以说该分支没有必要长期保存。

　　而在其他版本控制工具中，删除分支通常意味着删除分支上的所有历史轨迹，所以不能因为打了标签就认为其没有必要保存。
